// Generated by vfsgen; do not edit.

// +build !dev

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"
)

// assets statically implements the virtual filesystem given to vfsgen as input.
var assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := _vfsgen_fs{
		"/": &_vfsgen_dirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2015-07-10T21:56:31Z"),
		},
		"/assets": &_vfsgen_dirInfo{
			name:    "assets",
			modTime: mustUnmarshalTextTime("2015-07-10T21:56:31Z"),
		},
		"/assets/repo.html.tmpl": &_vfsgen_compressedFileInfo{
			name:              "repo.html.tmpl",
			modTime:           mustUnmarshalTextTime("2015-04-25T21:16:50Z"),
			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x4f\x4f\xe3\x38\x14\x3f\xc3\xa7\x78\xf2\x85\x16\x29\x29\xab\x5d\xed\xa1\x4d\x7b\xd8\x45\xda\x45\x5a\x04\x42\xcb\x5c\x91\x9b\xbc\x26\x9e\x3a\x76\xc6\x7e\x29\xa0\x28\xdf\x7d\xec\xc4\x29\x29\x14\x98\xb9\xcc\x01\x1c\x25\xf9\xbd\xf7\x7e\x7f\x5e\x9a\x64\x62\x07\xa9\xe4\xd6\x2e\x99\x14\x96\x22\x54\x64\x9e\x21\xd7\x51\xc5\xd3\x2d\xcf\x31\xaa\xab\x8c\x13\x32\x10\xd9\x92\x35\x4d\x7c\x87\x95\x8e\xaf\xca\x4a\x1b\xba\xe5\x54\xb8\x3f\x42\xa3\xda\x96\x81\xa5\x67\x89\x4b\x56\x69\x2b\x48\x68\x35\x07\x83\x92\x93\xd8\xe1\x82\xad\x4e\x4f\x8e\x37\x8a\x0a\xe4\x19\x1a\xff\x42\xd3\xcc\xce\xe1\xff\x9b\xcb\x9b\x39\x5c\xf3\x2d\x02\x15\xc2\x82\x15\x65\x25\xd1\xc4\x70\x3e\x6b\x5b\xff\x8e\xd8\x00\x7e\x83\x89\x44\x05\xfd\x28\xff\xe8\xdb\x7e\x50\x3b\x85\xdf\xfc\x3b\x27\x89\xad\xb8\x02\x12\xe4\xa7\x79\x3b\xb1\x75\xb3\xba\x76\x27\x7d\xb1\xf8\x5f\x5d\xe2\xad\x83\x77\x50\x07\xe6\x50\x18\xdc\x74\xc0\x97\x47\x0c\x88\x9b\x1c\x69\xc9\x1e\xd6\x92\xab\x2d\x5b\x25\x96\x8c\x56\xf9\xaa\x69\x26\x42\x65\xf8\xf4\x66\x1a\xb8\x98\xc6\x7f\x55\xdb\x7c\xd4\xb9\x6d\x93\x59\x80\x25\x33\x1e\x66\x40\x69\x87\xde\x3f\x57\x2b\xc0\x55\xd6\x93\x9e\x79\xd6\x9d\x8c\xfb\x8a\xbf\x58\x88\x77\xa3\xf1\x19\xeb\x77\x81\x87\x14\x03\x9f\x90\x21\x5b\x72\x29\x7d\x72\x26\x4d\x73\x2c\x0d\x6d\x0b\xd5\x10\x8c\xbd\x38\x07\x32\x75\x65\xfd\x3d\x9f\xcc\x10\xde\x8d\xd4\x9c\x5c\x72\x45\x5e\xd0\x62\xa4\x0e\x99\xfa\x8d\x30\x5f\xf9\x8e\xdb\xd4\x88\x8a\xe6\x3b\x2d\xb2\xc9\xc5\x94\x81\x56\xa9\x14\xe9\x76\xc9\xfa\xad\x79\xc8\xf5\x43\x98\x62\x72\xf6\x01\xd1\xb3\xe9\x82\x0d\xc4\x7a\x64\xb4\xae\x89\xb4\x62\x83\x7d\xb9\x06\x27\x3b\x44\x35\x44\x19\x7c\xb4\x86\xab\xfb\x0e\x7f\x54\xea\x03\x01\x33\x61\xf9\x5a\x62\x16\x10\x42\xe5\x71\x1c\xbf\x28\x75\x90\x2d\xa7\x90\x5f\xe1\xe1\x3c\xbe\xca\x6b\x9d\x3d\x77\x92\x25\xa2\xcc\x5f\x09\x2a\x71\x43\x0b\x58\x6b\xe3\x96\x3d\x32\x3c\x13\xb5\x9d\xc3\x1f\xd5\x93\xa3\x6d\x4d\xda\x85\xec\xaa\x0c\x09\x7b\x14\x19\x15\x4b\xf6\xfb\x9f\x0c\x0a\xf4\x46\x74\xd7\xab\xc1\xaa\x51\x64\xff\x2e\xb8\xea\xac\xee\xd9\xd5\x72\x98\x2a\xed\x1f\x44\x7e\xba\xde\x45\x0f\x31\xfe\xe6\x08\x95\x48\xe1\x63\x7b\x8d\xd6\x76\xad\x0f\xe4\x29\x5c\x67\xe9\xbb\x47\x5a\x45\x85\xde\xa1\x81\x7d\xe4\x9a\x86\xd0\x7d\x97\x9c\xcc\xc0\x52\x5d\x96\x8e\xbf\x65\xae\x70\xb8\x74\xd1\x1b\x6f\xcf\xbd\x91\xc7\x16\xc7\xbf\x2d\xc8\xfb\x14\x44\x4f\x66\x6e\x9e\x61\xd6\x7d\xe8\x9d\xea\xb5\x3c\x62\xe5\xc8\x83\x63\x6c\x6b\xb5\x55\xfa\xd1\xb1\xe9\x9f\xc1\xc6\xe8\x12\x3e\xfc\xc0\x5c\x0a\xd3\xdf\xfe\x92\xda\xff\x74\xca\x65\xdc\xfd\xbf\xc3\x9d\xe3\x43\xfa\xc7\xc1\x77\x58\x6a\xc2\xb8\x3f\x3a\x78\xe0\xf1\x62\xde\xeb\x64\x1d\xec\x60\x2a\x91\x9b\xb9\x0b\x0b\x15\x6e\x05\x5f\x85\x2f\x1c\xa7\x4d\x93\xe1\x46\xa8\xb1\x01\xfb\x1f\x08\x67\x44\xad\xa8\x6f\xf0\xb9\x0f\x07\xae\xeb\x94\x44\xaa\x15\x84\x33\x0a\xc5\xc7\xd6\x0f\xd5\xf7\xae\xf1\xd1\xe7\x64\x38\xbf\x07\x00\x00\xff\xff\xbe\x29\xb5\x52\x57\x07\x00\x00"),
			uncompressedSize:  1879,
		},
		"/assets/script.js": &_vfsgen_compressedFileInfo{
			name:              "script.js",
			modTime:           mustUnmarshalTextTime("2015-07-10T21:56:31Z"),
			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x41\x6f\xdb\x3c\x0c\x3d\x27\xbf\x82\xd0\xa5\x0e\x52\x3b\xfd\xae\x5f\xd6\xc3\x5a\x0c\x6b\x80\xb5\x1b\xd6\x0e\x18\x50\x14\x86\x62\x31\x89\x56\x45\xf2\x24\x3a\x69\x30\xf4\xbf\x8f\xb2\x9d\xd6\xa9\xd3\x1d\x9c\xd8\x22\xf9\xf8\xc8\x47\xaa\x2a\x95\x24\xcc\x97\x2e\x2f\x65\xf1\x28\x97\x08\xe7\xb0\xa8\x6c\x41\xda\xd9\xe4\xf5\x34\xd7\x6a\x04\x7f\x86\x83\x8d\xf4\x70\xe0\xab\x5c\x51\xad\xd1\x52\xb6\x44\xfa\x64\x30\xbe\x5e\xec\x66\xea\x4d\xe8\xf4\x6d\x64\x3e\xaf\x88\x9c\x65\x80\xd7\xb3\x0e\x44\xb8\xd8\x5d\x1a\x19\xc2\x8d\x5c\x63\x22\x1a\x8e\x69\x13\x22\x46\xf7\x67\x0f\xd3\xe1\x70\xd0\x03\xcb\x08\x9f\xe8\xd2\x59\x62\x00\x06\x16\x3f\x62\x98\xb6\xcb\x2c\xcb\xc4\xf4\x98\xbf\xb3\x85\xd1\xc5\x63\xf4\xfd\x25\x37\x32\x14\x5e\x97\xf4\xff\xc6\x69\x95\x9c\x8d\xc4\xd1\x0c\x72\x3e\xb3\x0a\x9f\x38\x24\xfd\xef\x28\x66\xb1\xa7\x0d\x63\x86\x05\xa5\x83\x9c\x1b\x54\x22\x32\x8e\x2d\xf0\xf8\xbb\xc2\x10\xf9\x59\xdc\xc2\xcf\xeb\x2f\x57\x44\xe5\xf7\xe6\x30\x89\x7d\x6a\x1d\x98\x9c\x71\x52\x75\xd5\xa8\x05\x18\x4c\x26\x70\xa5\x15\x02\xad\xf0\xb0\x44\x30\x72\x8e\x26\x63\x97\x3e\xab\x40\x3b\x83\x19\x93\x29\x8d\xdc\xc5\x7a\xad\xb3\x58\x73\x8a\x78\xb7\x2b\xb7\x05\x71\xe3\xa0\x86\xc3\x00\x1f\x37\x52\x9b\xc8\x5b\x80\x5e\xc4\x4c\x1e\x41\xf2\x63\x1d\xf3\x5f\x4b\x6d\x39\x25\x34\xaa\x84\x98\x30\x16\xd6\x7e\xe6\x72\x1f\xcb\x69\xce\xa6\x87\xc6\xe3\xf3\x72\x28\xf6\xd2\xa5\x2d\xf9\xb4\x89\x12\xb1\x2b\x83\x85\xf3\x90\x44\x28\x5d\xe3\xf2\xdf\x87\x17\x06\x06\xed\x92\x56\x7c\x36\x1e\x37\x3d\x1a\x30\xeb\xa4\xb5\xde\xeb\x87\x77\x73\xbd\xa8\x33\x6a\x31\xe0\x9c\xc1\x5b\x8c\x41\xaf\xa2\xf1\x78\x5a\x1b\xe6\x1e\xe5\x63\xfd\xfa\x3c\x6c\x9e\x4e\xbe\x6e\x03\x5e\xc1\xde\x5b\x13\x16\x22\x6f\x03\x99\x44\x4f\xa6\x38\xb7\x9c\xa0\x91\xe9\xda\x6d\xa2\xec\x3a\xc0\x67\x07\xfb\x0d\x24\x07\x62\x66\x03\x49\xc3\x75\xec\x05\xe4\x59\xd0\x3c\x42\x6d\xf3\xf5\xde\x9c\xff\x53\x86\x86\x4f\xcf\xb9\x69\x7f\xef\xf8\x1d\xae\x7d\xbf\x92\x07\xc7\xd2\x8d\x53\x98\xb1\x11\x3d\x5d\x20\x6b\x89\x9d\x0b\xe2\xb4\xcf\x30\xb3\xbc\xca\xb7\x7a\x6e\x78\xd0\x46\x53\xe0\xe2\x67\x75\x2c\xc8\x05\xa1\xe7\xc2\x9e\xbb\x9b\x52\xa2\x4d\x4e\xbe\x7d\xbd\xbd\x3b\x39\x85\x93\x49\x3a\x69\x40\xf8\x83\x7c\x85\xdd\x9d\x0a\x48\xed\xaa\x5d\xa1\x54\xe8\x13\xd1\x5e\x17\xe9\xdd\xae\x44\x71\x2a\x64\x59\xf2\x8d\x20\xe3\xba\x4d\x9e\xd2\xed\x76\x9b\x32\xd7\x75\x5a\x79\x1e\x8f\x82\x4b\x50\xe2\x10\xce\xc6\x8e\xad\x4b\xe7\x89\x8b\xa1\x55\xfc\x61\x7e\xf6\x5c\xc0\x18\xde\xde\x80\xcf\xc3\xbf\x01\x00\x00\xff\xff\xc2\x65\x02\x53\x6c\x05\x00\x00"),
			uncompressedSize:  1388,
		},
		"/assets/style.css": &_vfsgen_compressedFileInfo{
			name:              "style.css",
			modTime:           mustUnmarshalTextTime("2015-06-25T08:56:34Z"),
			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x93\xcf\x72\x9b\x30\x10\xc6\xcf\xf1\x53\x68\x92\xab\xc5\x00\x25\xad\x83\x4f\xbd\xf5\xd4\x77\x58\xd0\x02\x9a\x0a\x89\x91\x84\x6b\xb7\xe3\x77\xef\x0a\x01\x76\x1c\x9a\xf1\xf8\xc0\x4a\xdf\xb7\xbf\xfd\xa3\xca\x88\x0b\xfb\xbb\x7b\x6a\x8c\xf6\xbc\x81\x5e\xaa\x4b\xc9\x9e\x7f\xa0\x3a\xa1\x97\x35\xb0\x9f\x38\xe2\xf3\x9e\xad\x81\x3d\xfb\x6e\x25\xa8\x3d\x73\xa0\x1d\x77\x68\x65\x73\x9c\xd5\x4e\xfe\xc1\x92\x65\xc5\x70\xa6\x88\x92\x1a\x79\x87\xb2\xed\x3c\xc5\x92\x22\x3f\xbc\x7e\xcb\x8a\xfc\x8d\x8e\x7a\xb0\xad\xd4\x25\x4b\xc3\xc5\xeb\x4e\xc8\x53\x52\xa3\xf6\x68\x79\x0f\x67\xfe\x5b\x0a\xdf\x05\xa2\xf5\xa3\x64\x6f\xe9\x74\x77\x56\x72\x85\x0d\x99\xc2\xe8\xcd\x2d\x66\x63\xa6\x18\x9c\x4d\x09\x8a\x7c\xa3\x57\x4c\x99\xe5\xf7\x3e\xde\x0c\x25\xcb\xdf\x59\x57\xc6\x7b\xd3\x97\xec\x30\xc3\x51\xbd\xc0\xdc\x00\x3a\xb8\xd4\x46\x19\x5b\xb2\x97\x22\x3b\x7c\xa9\x0b\x12\x79\x3c\x7b\x2e\xb0\x36\x16\xbc\x34\xe4\xaf\x8d\xc6\x49\x56\x76\xe6\x84\x76\x11\xc7\xaf\x60\xf1\x41\x31\x6a\x81\x36\x34\x2b\xc8\xba\xfc\x06\x1b\xe9\x8a\x4d\xba\x62\xa6\xdb\x25\x42\x3a\xa8\x14\x8a\xa0\x1b\x8c\x9c\xba\x88\x27\xaa\xda\x2d\x30\x4f\xf5\x68\x5d\xc0\x16\xd8\xc0\xa8\xfc\x71\xad\xa3\xb5\x70\xf9\xac\x88\x40\x9e\xb8\x1e\x94\x8a\xec\xf7\x43\xce\x26\xac\x77\x46\x84\x13\xba\xae\xa4\xf3\x9c\x00\xec\xb4\x56\x95\xb1\x54\x1f\x09\x86\x33\x73\x46\x49\xc1\x5e\x84\x10\xc7\xe5\x80\x5b\x10\x72\x24\xd6\x62\xab\xcc\x38\xad\xeb\x83\x2d\x6d\x15\x88\x48\x54\x41\xfd\xab\xb5\x86\x7a\xc8\x97\xd9\x34\x87\xf0\x23\xaf\x01\x84\x90\xba\x25\x97\xd8\xc2\x8f\x09\xa7\x7f\xca\xd2\xdb\xe1\x9a\xf8\x46\x8b\x88\x1b\x08\xcb\xab\x79\x48\x72\xdd\x25\x75\x07\xba\x45\xc7\xc3\xe5\xc7\x61\x6e\xce\x32\x06\x67\xa3\x79\xb5\xbf\x16\xcb\x7c\x3b\x5a\x6b\x15\x56\x9b\x1b\xcd\xe3\x16\xc1\xdd\x2a\x2e\x9d\xdf\xba\x17\x26\xa6\x0c\x90\xdd\xf4\x36\x28\x89\x19\xa0\x96\x9e\xde\x77\x9a\xe4\xaf\x41\xa6\xe4\xbc\x99\xff\xd1\xaf\x82\x2c\x49\xc3\xfd\x7f\x01\x00\x00\xff\xff\x7e\x5d\xd7\xba\x2d\x04\x00\x00"),
			uncompressedSize:  1069,
		},
	}

	fs["/"].(*_vfsgen_dirInfo).entries = []os.FileInfo{
		fs["/assets"].(os.FileInfo),
	}
	fs["/assets"].(*_vfsgen_dirInfo).entries = []os.FileInfo{
		fs["/assets/repo.html.tmpl"].(os.FileInfo),
		fs["/assets/script.js"].(os.FileInfo),
		fs["/assets/style.css"].(os.FileInfo),
	}

	return fs
}()

type _vfsgen_fs map[string]interface{}

func (fs _vfsgen_fs) Open(path string) (http.File, error) {
	// TODO: Maybe clean path?
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *_vfsgen_compressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &_vfsgen_compressedFile{
			_vfsgen_compressedFileInfo: f,
			gr: gr,
		}, nil
	case *_vfsgen_dirInfo:
		return &_vfsgen_dir{
			_vfsgen_dirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// _vfsgen_compressedFileInfo is a static definition of a gzip compressed file.
type _vfsgen_compressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *_vfsgen_compressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *_vfsgen_compressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *_vfsgen_compressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *_vfsgen_compressedFileInfo) Name() string       { return f.name }
func (f *_vfsgen_compressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *_vfsgen_compressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *_vfsgen_compressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *_vfsgen_compressedFileInfo) IsDir() bool        { return false }
func (f *_vfsgen_compressedFileInfo) Sys() interface{}   { return nil }

// _vfsgen_compressedFile is an opened compressedFile instance.
type _vfsgen_compressedFile struct {
	*_vfsgen_compressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *_vfsgen_compressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f._vfsgen_compressedFileInfo.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.ReadFull(f.gr, make([]byte, f.seekPos-f.grPos))
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *_vfsgen_compressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case os.SEEK_SET:
		f.seekPos = 0 + offset
	case os.SEEK_CUR:
		f.seekPos += offset
	case os.SEEK_END:
		f.seekPos = f._vfsgen_compressedFileInfo.uncompressedSize + offset
	}
	return f.seekPos, nil
}
func (f *_vfsgen_compressedFile) Close() error {
	return f.gr.Close()
}

// _vfsgen_dirInfo is a static definition of a directory.
type _vfsgen_dirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *_vfsgen_dirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *_vfsgen_dirInfo) Close() error               { return nil }
func (d *_vfsgen_dirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *_vfsgen_dirInfo) Name() string       { return d.name }
func (d *_vfsgen_dirInfo) Size() int64        { return 0 }
func (d *_vfsgen_dirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *_vfsgen_dirInfo) ModTime() time.Time { return d.modTime }
func (d *_vfsgen_dirInfo) IsDir() bool        { return true }
func (d *_vfsgen_dirInfo) Sys() interface{}   { return nil }

// _vfsgen_dir is an opened dir instance.
type _vfsgen_dir struct {
	*_vfsgen_dirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *_vfsgen_dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == os.SEEK_SET {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d._vfsgen_dirInfo.name)
}

func (d *_vfsgen_dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d._vfsgen_dirInfo.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d._vfsgen_dirInfo.entries)-d.pos {
		count = len(d._vfsgen_dirInfo.entries) - d.pos
	}
	e := d._vfsgen_dirInfo.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
